#!/usr/bin/env php
<?php
/**
 * Manual vulnerability test script
 * 
 * This script demonstrates the vulnerabilities that were fixed in version 1.7.3
 * Run this against a WordPress site with the plugin installed to verify the fixes
 * 
 * Usage: php manual-vulnerability-test.php https://example.com
 */

if ( $argc < 2 ) {
	echo "Usage: php manual-vulnerability-test.php https://example.com\n";
	exit( 1 );
}

$site_url = rtrim( $argv[1], '/' );

echo "Testing Stop User Enumeration vulnerabilities on: $site_url\n";
echo str_repeat( '=', 50 ) . "\n\n";

/**
 * Test a URL and report the result
 */
function test_url( $url, $description ) {
	echo "Testing: $description\n";
	echo "URL: $url\n";
	
	$ch = curl_init();
	curl_setopt( $ch, CURLOPT_URL, $url );
	curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
	curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, true );
	curl_setopt( $ch, CURLOPT_SSL_VERIFYPEER, false );
	curl_setopt( $ch, CURLOPT_HEADER, true );
	
	$response = curl_exec( $ch );
	$http_code = curl_getinfo( $ch, CURLINFO_HTTP_CODE );
	$header_size = curl_getinfo( $ch, CURLINFO_HEADER_SIZE );
	$body = substr( $response, $header_size );
	
	curl_close( $ch );
	
	echo "Status: $http_code\n";
	
	// Check if blocked
	if ( $http_code === 401 || strpos( $body, 'rest_cannot_access' ) !== false ) {
		echo "Result: ✓ BLOCKED (Good - enumeration prevented)\n";
		$blocked = true;
	} elseif ( $http_code === 200 && strpos( $body, '"id"' ) !== false ) {
		echo "Result: ✗ EXPOSED (Bad - user data leaked)\n";
		$blocked = false;
		// Show first user if exposed
		$data = json_decode( $body, true );
		if ( is_array( $data ) && ! empty( $data[0] ) ) {
			echo "Leaked data: User ID: {$data[0]['id']}, Name: {$data[0]['name']}, Slug: {$data[0]['slug']}\n";
		}
	} else {
		echo "Result: ? UNKNOWN (Status: $http_code)\n";
		$blocked = null;
	}
	
	echo "\n";
	
	return $blocked;
}

// Test 1: Normal REST API request (should be blocked)
echo "Test 1: Normal REST API Users Endpoint\n";
echo str_repeat( '-', 40 ) . "\n";
$result1 = test_url( 
	"$site_url/wp-json/wp/v2/users", 
	"Standard users endpoint request"
);

// Test 2: URL-encoded bypass attempt (vulnerability in < 1.7.3)
echo "Test 2: URL-Encoded Bypass Attempt\n";
echo str_repeat( '-', 40 ) . "\n";
$encoded_path = '%77%70%2d%6a%73%6f%6e%2f%77%70%2f%76%32%2f%75%73%65%72%73';
$result2 = test_url( 
	"$site_url/$encoded_path", 
	"URL-encoded path (wp-json/wp/v2/users)"
);

// Test 3: Partially encoded bypass attempt
echo "Test 3: Partially Encoded Bypass Attempt\n";
echo str_repeat( '-', 40 ) . "\n";
$result3 = test_url( 
	"$site_url/wp-json/wp/v2/%75%73%65%72%73", 
	"Partially encoded 'users' in path"
);

// Test 4: simple-jwt-login query parameter bypass (vulnerability in < 1.7.3)
echo "Test 4: Simple-JWT-Login Query Parameter Bypass\n";
echo str_repeat( '-', 40 ) . "\n";
$result4 = test_url( 
	"$site_url/wp-json/wp/v2/users?foo=simple-jwt-login", 
	"Query parameter containing 'simple-jwt-login'"
);

// Test 5: Multiple bypass attempts combined
echo "Test 4: Combined Bypass Attempts\n";
echo str_repeat( '-', 40 ) . "\n";
$result5 = test_url( 
	"$site_url/%77%70%2d%6a%73%6f%6e/wp/v2/users?test=simple-jwt-login", 
	"URL encoding + query parameter bypass"
);

// Summary
echo str_repeat( '=', 50 ) . "\n";
echo "VULNERABILITY TEST SUMMARY\n";
echo str_repeat( '=', 50 ) . "\n\n";

$tests = [
	'Normal REST API' => $result1,
	'URL-encoded bypass' => $result2,
	'Partial encoding' => $result3,
	'Query param bypass' => $result4,
	'Combined bypasses' => $result5,
];

$blocked_count = 0;
$exposed_count = 0;

foreach ( $tests as $test => $blocked ) {
	if ( $blocked === true ) {
		echo "✓ $test: BLOCKED\n";
		$blocked_count++;
	} elseif ( $blocked === false ) {
		echo "✗ $test: EXPOSED (VULNERABLE!)\n";
		$exposed_count++;
	} else {
		echo "? $test: UNKNOWN\n";
	}
}

echo "\n";

if ( $exposed_count === 0 && $blocked_count === count( $tests ) ) {
	echo "✓ ALL TESTS PASSED - The plugin appears to be properly secured (v1.7.3+)\n";
} elseif ( $result1 === true && ( $result2 === false || $result4 === false ) ) {
	echo "⚠ VULNERABLE - The plugin is vulnerable to bypass attacks (< v1.7.3)\n";
	echo "The normal endpoint is blocked but bypass methods work.\n";
	echo "UPDATE TO VERSION 1.7.3 OR HIGHER!\n";
} else {
	echo "⚠ CHECK RESULTS - Some tests gave unexpected results\n";
}

echo "\n";