<?php
/**
 * Standalone test to verify vulnerability fixes
 * This test can run without WordPress test suite
 */

// Colors for output
define( 'GREEN', "\033[0;32m" );
define( 'RED', "\033[0;31m" );
define( 'YELLOW', "\033[1;33m" );
define( 'NC', "\033[0m" ); // No Color

class Test_Vulnerability_Fixes {
	
	private $passed = 0;
	private $failed = 0;
	
	public function run() {
		echo "======================================\n";
		echo "Stop User Enumeration - Vulnerability Fix Tests\n";
		echo "======================================\n\n";
		
		// Test 1: Verify REST API hook change
		$this->test_rest_api_hook_change();
		
		// Test 2: Verify JavaScript escaping fix
		$this->test_javascript_escaping();
		
		// Test 3: Verify development path removal
		$this->test_development_path_removed();
		
		// Test 4: Verify version update
		$this->test_version_update();
		
		// Test 5: Verify privacy disclosure
		$this->test_privacy_disclosure();
		
		// Summary
		$this->print_summary();
	}
	
	private function test_rest_api_hook_change() {
		echo "Test 1: REST API Hook Change\n";
		echo "-----------------------------\n";
		
		// Handle different environments
		$core_file = __DIR__ . '/../stop-user-enumeration/includes/class-core.php';
		if ( ! file_exists( $core_file ) ) {
			$core_file = __DIR__ . '/../includes/class-core.php';
		}
		$content = file_get_contents( $core_file );
		
		// Check for new hook
		if ( strpos( $content, "add_filter( 'rest_pre_dispatch'" ) !== false ) {
			$this->pass( "✓ Uses correct 'rest_pre_dispatch' filter" );
		} else {
			$this->fail( "✗ Still using old hook or hook not found" );
		}
		
		// Check old hook is removed
		if ( strpos( $content, "add_action( 'rest_authentication_errors'" ) === false ) {
			$this->pass( "✓ Old 'rest_authentication_errors' hook removed" );
		} else {
			$this->fail( "✗ Old hook still present" );
		}
		
		echo "\n";
	}
	
	private function test_javascript_escaping() {
		echo "Test 2: JavaScript Escaping Fix\n";
		echo "--------------------------------\n";
		
		// Handle different environments
		$admin_file = __DIR__ . '/../stop-user-enumeration/admin/class-admin-pages.php';
		if ( ! file_exists( $admin_file ) ) {
			$admin_file = __DIR__ . '/../admin/class-admin-pages.php';
		}
		$content = file_get_contents( $admin_file );
		
		// Check for wp_json_encode usage
		if ( strpos( $content, 'wp_json_encode( $page_hook_id )' ) !== false ) {
			$this->pass( "✓ Uses wp_json_encode() for JavaScript variables" );
		} else {
			$this->fail( "✗ Not using wp_json_encode() for escaping" );
		}
		
		echo "\n";
	}
	
	private function test_development_path_removed() {
		echo "Test 3: Development Path Removal\n";
		echo "---------------------------------\n";
		
		// Handle different environments
		$core_file = __DIR__ . '/../stop-user-enumeration/includes/class-core.php';
		if ( ! file_exists( $core_file ) ) {
			$core_file = __DIR__ . '/../includes/class-core.php';
		}
		$content = file_get_contents( $core_file );
		
		// Check for development path
		if ( strpos( $content, '/home/alan/Google/Projects' ) === false ) {
			$this->pass( "✓ Development path removed from comments" );
		} else {
			$this->fail( "✗ Development path still present in comments" );
		}
		
		echo "\n";
	}
	
	private function test_version_update() {
		echo "Test 4: Version Update\n";
		echo "-----------------------\n";
		
		// Handle different environments
		$plugin_file = __DIR__ . '/../stop-user-enumeration/stop-user-enumeration.php';
		if ( ! file_exists( $plugin_file ) ) {
			$plugin_file = __DIR__ . '/../stop-user-enumeration.php';
		}
		$content = file_get_contents( $plugin_file );
		
		// Check version in header
		if ( preg_match( '/Version:\s*1\.7\.3/', $content ) ) {
			$this->pass( "✓ Plugin header updated to version 1.7.3" );
		} else {
			$this->fail( "✗ Plugin header not updated to 1.7.3" );
		}
		
		// Check version constant
		if ( strpos( $content, "'1.7.3'" ) !== false ) {
			$this->pass( "✓ Version constant updated to 1.7.3" );
		} else {
			$this->fail( "✗ Version constant not updated" );
		}
		
		echo "\n";
	}
	
	private function test_privacy_disclosure() {
		echo "Test 5: Privacy Disclosure\n";
		echo "---------------------------\n";
		
		// Handle different environments
		$readme_file = __DIR__ . '/../stop-user-enumeration/readme.txt';
		if ( ! file_exists( $readme_file ) ) {
			$readme_file = __DIR__ . '/../readme.txt';
		}
		$content = file_get_contents( $readme_file );
		
		// Check for Privacy section
		if ( strpos( $content, '== Privacy ==' ) !== false ) {
			$this->pass( "✓ Privacy section added to readme.txt" );
			
			// Check for key disclosures
			if ( strpos( $content, 'fullworksplugins.com' ) !== false ) {
				$this->pass( "✓ External API disclosed" );
			} else {
				$this->fail( "✗ External API not properly disclosed" );
			}
			
			if ( strpos( $content, 'optional and requires your explicit consent' ) !== false ) {
				$this->pass( "✓ Opt-in requirement disclosed" );
			} else {
				$this->fail( "✗ Opt-in requirement not disclosed" );
			}
		} else {
			$this->fail( "✗ Privacy section not found in readme.txt" );
		}
		
		echo "\n";
	}
	
	private function pass( $message ) {
		echo GREEN . $message . NC . "\n";
		$this->passed++;
	}
	
	private function fail( $message ) {
		echo RED . $message . NC . "\n";
		$this->failed++;
	}
	
	private function print_summary() {
		echo "======================================\n";
		echo "TEST SUMMARY\n";
		echo "======================================\n";
		echo "Passed: " . GREEN . $this->passed . NC . "\n";
		echo "Failed: " . RED . $this->failed . NC . "\n\n";
		
		if ( $this->failed === 0 ) {
			echo GREEN . "✓ ALL TESTS PASSED!" . NC . "\n";
			echo "All vulnerability fixes have been properly implemented.\n";
			exit( 0 );
		} else {
			echo RED . "✗ SOME TESTS FAILED!" . NC . "\n";
			echo "Please review the failed tests above.\n";
			exit( 1 );
		}
	}
}

// Run the tests
$tester = new Test_Vulnerability_Fixes();
$tester->run();